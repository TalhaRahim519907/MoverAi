import React from 'react';
import type { InventoryData, InventoryItem, SavedInventoryData } from '../types';
import { InventoryIcon, TranscriptIcon, SizeIcon, SaveIcon, TrashIcon, EmailIcon } from './Icons';

interface InventoryResultProps {
    data: InventoryData | SavedInventoryData;
    onSave: (inventory: InventoryData) => void;
    onDelete: (id: string) => void;
    onDone: () => void;
}

const InventoryResult: React.FC<InventoryResultProps> = ({ data, onSave, onDelete, onDone }) => {
    const isSaved = 'id' in data;

    const handleExport = () => {
        if (!data || !data.inventory) return;

        const escapeCsvField = (field: any): string => {
            const stringField = String(field);
            if (/[",\n]/.test(stringField)) {
                return `"${stringField.replace(/"/g, '""')}"`;
            }
            return stringField;
        };

        const headers = ['Name', 'Count', 'Description', 'Estimated Size', 'Tags'];
        const csvRows = [headers.join(',')];

        data.inventory.forEach((item: InventoryItem) => {
            const row = [
                escapeCsvField(item.name),
                item.count,
                escapeCsvField(item.description),
                escapeCsvField(item.estimatedSize),
                escapeCsvField(item.tags.join('; ')),
            ];
            csvRows.push(row.join(','));
        });

        const csvString = csvRows.join('\n');
        const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');

        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', 'moverai-inventory.csv');
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    };

    const handleShareByEmail = () => {
        const subject = "MoverAi - Household Inventory List";
        let body = `Hello,\n\nPlease find the generated household inventory below.\n\n`;
        body += `Total Estimated Volume: ${data.totalEstimatedSize}\n`;
        body += `--------------------------------------------------\n\n`;

        data.inventory.forEach(item => {
            body += `Item: ${item.name} (x${item.count})\n`;
            body += `Description: ${item.description}\n`;
            body += `Estimated Size: ${item.estimatedSize}\n`;
            body += `Tags: ${item.tags.join(', ')}\n\n`;
        });
        
        body += `--------------------------------------------------\n`;
        body += `Simulated Transcript:\n"${data.transcript}"\n\n`;
        body += `Generated by MoverAi.`;
        
        const mailtoLink = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
        window.location.href = mailtoLink;
    };


    return (
        <div className="w-full max-w-6xl mx-auto animate-fade-in">
            <div className="bg-gray-900/50 rounded-xl shadow-2xl p-6 sm:p-8 border border-gray-700/50">
                <div className="grid grid-cols-1 lg:grid-cols-5 gap-8">
                    
                    <div className="lg:col-span-3 flex flex-col">
                        <div className="flex items-center mb-4">
                            <InventoryIcon className="w-8 h-8 text-cyan-400 mr-3" />
                            <h2 className="text-2xl font-bold text-gray-100">Inventory List</h2>
                        </div>
                        <div className="bg-gray-950/50 rounded-lg flex flex-col max-h-[60vh] border border-gray-800">
                            <div className="flex-grow p-4 overflow-y-auto">
                                {data.inventory.length > 0 ? (
                                    <ul className="space-y-4">
                                        {data.inventory.map((item, index) => (
                                            <li key={index} className="p-4 bg-gray-800/70 rounded-md border border-gray-700/80 shadow-sm">
                                                <div className="flex justify-between items-start gap-4">
                                                    <h3 className="font-bold text-lg text-gray-200">{item.name}</h3>
                                                    <span className="flex-shrink-0 text-sm font-semibold bg-cyan-500/20 text-cyan-300 px-2.5 py-1 rounded-full">
                                                        x{item.count}
                                                    </span>
                                                </div>
                                                <p className="text-gray-400 text-sm my-1">{item.description}</p>
                                                <p className="text-cyan-300/80 text-sm font-medium my-2">
                                                    <SizeIcon className="inline w-4 h-4 mr-1.5 align-text-bottom" />
                                                    {item.estimatedSize}
                                                </p>
                                                <div className="flex flex-wrap gap-2 mt-3">
                                                    {item.tags.map((tag, tagIndex) => (
                                                        <span key={tagIndex} className="text-xs font-medium bg-gray-700 text-gray-300 px-2.5 py-1 rounded-full">
                                                            {tag}
                                                        </span>
                                                    ))}
                                                </div>
                                            </li>
                                        ))}
                                    </ul>
                                ) : (
                                    <p className="text-gray-400 text-center py-8">No items were identified.</p>
                                )}
                            </div>
                            {data.inventory.length > 0 && (
                                <div className="flex-shrink-0 p-4 border-t-2 border-cyan-500/30 bg-gray-800/50 rounded-b-lg">
                                    <div className="flex justify-between items-center">
                                        <h4 className="text-lg font-bold text-gray-200">Total Estimated Volume</h4>
                                        <span className="text-xl font-bold text-cyan-300">{data.totalEstimatedSize}</span>
                                    </div>
                                </div>
                            )}
                        </div>
                    </div>

                    <div className="lg:col-span-2 flex flex-col">
                        <div className="flex items-center mb-4">
                            <TranscriptIcon className="w-8 h-8 text-cyan-400 mr-3" />
                            <h2 className="text-2xl font-bold text-gray-100">Simulated Audio</h2>
                        </div>
                        <div className="flex-grow bg-gray-950/50 rounded-lg p-4 overflow-y-auto max-h-[60vh] border border-gray-800">
                             <p className="text-gray-300 whitespace-pre-wrap font-mono text-sm leading-relaxed">
                                {data.transcript}
                            </p>
                        </div>
                    </div>
                </div>

                <div className="mt-8 pt-6 border-t border-gray-700/50">
                    <div className="flex justify-between items-center gap-4 flex-wrap">
                        <button onClick={onDone} className="px-6 py-2 bg-gray-600 hover:bg-gray-500 text-white font-semibold rounded-lg transition-colors">
                            Done
                        </button>

                        <div className="flex items-center gap-2 sm:gap-4 flex-wrap justify-center">
                            {!isSaved && (
                                <button onClick={() => onSave(data)} className="inline-flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-lg transition-colors shadow-md">
                                    <SaveIcon className="w-5 h-5 mr-2" />
                                    Save Inventory
                                </button>
                            )}
                             <button onClick={handleShareByEmail} className="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-lg transition-colors shadow-md">
                                <EmailIcon className="w-5 h-5 mr-2" />
                                Share via Email
                            </button>
                            <button onClick={handleExport} disabled={!data || data.inventory.length === 0} className="px-5 py-2 bg-cyan-600 hover:bg-cyan-700 text-white font-semibold rounded-lg transition-colors shadow-md disabled:bg-gray-500/50 disabled:cursor-not-allowed">
                                Export CSV
                            </button>
                            {isSaved && (
                                <button onClick={() => onDelete(data.id)} className="inline-flex items-center px-4 py-2 bg-red-800 hover:bg-red-700 text-white font-semibold rounded-lg transition-colors">
                                    <TrashIcon className="w-5 h-5 mr-2" />
                                    Delete
                                </button>
                            )}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default InventoryResult;